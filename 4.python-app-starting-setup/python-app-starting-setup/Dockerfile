# Python을 베이스 이미지로 하는 커스텀 이미지 만들기
# 도커 허브에서 Python을 검색하여 공식 Python 이미지를 찾을 수 있습니다.
FROM python

# 마음대로 해도 됨
WORKDIR /app

# 코드 파일 복사
# Python 파일이 있는 로컬 폴더의 모든 항목을 app 폴더에 복사
COPY . /app

# 마지막 단계로 이 컨테이너가 시작될 때 실행되어야 하는 명령을 추가
# python 이미지로 인해 사용할 수 있는 python 실행 파일을 사용하여 - "python"
# rng.py 파일을 실행하고자 합니다.
CMD ["python", "rng.py"]

# 이제 Dockerfile이 완료되었고 생성된 것을 docker build .을 실행하여 이미지 빌드

# docker build . 명령어를 실행하면 docker run을 실행하여 컨테이너를 불러올 수 있습니다.
# 여기에서는 포트를 노출하지 않습니다.
# 네트워크 기반 애플리케이션이 아니므로 그렇게 할 필요가 없습니다.
# docker run으로 이미지를 실행해도 컨테이너에 입력을 할 수는 없습니다.
# 이를 해결하기 위한 구성 옵션을 docker --help로 살펴봅니다.
# -i --interactive, 표준 입력을 열린 상태로 유지하며 attached 모드가 아닌 경우에도 컨테이너에
# 입력할 수 있습니다.
# 그러나 일반적으로 이것을 -t와 결합하면 의사(pseudo) TTY가 할당되는데요, 이것은
# 터미널을 생성한다는 것을 의미합니다.
# 따라서 i와 t 플래그를 결합하면 무언가를 입력할 수 있게 됩니다.
# 컨테이너는 입력을 수신하고 컨테이너에 의해 노출되는 터미널도 얻게 됩니다.
# 컨테이너가 실제 입력을 받는 장치가 되는 것이죠.
# 이제 -i와 -t 플래그를 더하여 -it라는 하나의 플래그로 결합할 수도 있습니다.
# 이제 컨테이너에 의해 노출된 이 의사(pseudo) 터미널과 통신하는 터미널에 무언가를 입력할 수 있습니다.

# 컨테이너가 종료 된 뒤 docker ps로 살펴보면 컨테이너가 종료되었음을 알 수 있습니다.

# docker start로 통신하려면 detached 모드가 디폴트이기 때문에 불가능합니다.
# 이를 해결하기 위해 두 가지 방법이 있습니다.
# -a 플래그를 넣어 attached 모드로 변경하는 것입니다. 하지만 이상하게 한번만 입력할 수 있습니다.
# 맞는 방법이 아닙니다.
# docker start --help를 살펴보면 출력을 수신하기 위해 -a만 있는 것이 아니라 -i를 통해 컨테이너에 무언가를
# 입력할 수 있다는 걸 알 수 있습니다.
# 이제 여기에 -t 플래그가 필요하지 않습니다. 
# 처음에 그 플래그로 컨테이너를 실행하고 docker run 명령을 사용하여 다시 컨테이너를 실행한다면
# 그 플래그가 여전히 기억되기 때문입니다. 
# 이제 -a -i를 추가하여 다시 실행하면 제대로 입력이 가능합니다.

# 도커는 간단한 유틸리티 애플리케이션을 도커화하는데에도 사용할 수 있습니다.
# 웹 서버나 노드만 사용할 수 있다는 게 아닙니다.